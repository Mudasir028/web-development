# What is ECMAscript 5?
is Known as 
## The "use strict" Directive
"use strict" defines that the JavaScript code should be executed in "strict mode".
## String.trim()
String.trim()
String.trim() removes whitespace from both sides of a string.
# Example
var str = "       Hello World!        ";

## Array.isArray()

The isArray() method checks whether an object is an array.

# Example
function myFunction() {
  var fruits = ["Banana", "Orange", "Apple", "Mango"];
  document.getElementById("demo").innerHTML = Array.isArray(fruits);
}

## Array.forEach()

The forEach() method calls a function once for each array element.

# Example
var txt = "";
var numbers = [45, 4, 9, 16, 25];
numbers.forEach(myFunction);

function myFunction(value, index, array) {
  txt = txt + value + "<br>";
}

## Array.map()
The map() method creates a new array by performing a function on each array element.

The map() method does not execute the function for array elements without values.

The map() method does not change the original array.
This # example multiplies each array value by 2:

# Example
var numbers1 = [45, 4, 9, 16, 25];
var numbers2 = numbers1.map(myFunction);

function myFunction(value, index, array) {
  return value * 2;
} 
Note that the function takes 3 arguments:

The item value
The item index
The array itself
The # example above uses only the value parameter.

## Array.filter()

The filter() method creates a new array with array elements that passes a test.

This # example creates a new array from elements with a value larger than 18:

# Example
var numbers = [45, 4, 9, 16, 25];
var over18 = numbers.filter(myFunction);

function myFunction(value, index, array) {
  return value > 18;
}
Note that the function takes 3 arguments:

The item value
The item index
The array itself
The # example above uses only the value parameter.

## Array.reduce()

The reduce() method runs a function on each array element to produce (reduce it to) a single value.

The reduce() method works from left-to-right in the array. See also reduceRight().

The reduce() method does not reduce the original array.

This # example finds the sum of all numbers in an array:

# Example
var numbers1 = [45, 4, 9, 16, 25];
var sum = numbers1.reduce(myFunction);

function myFunction(total, value, index, array) {
  return total + value;
}
Note that the function takes 4 arguments:

The total (the initial value / previously returned value)
The item value
The item index
The array itself
The # example above does not use the index and array parameters.

## Array.reduceRight()

This # example also finds the sum of all numbers in an array:

# Example
var numbers1 = [45, 4, 9, 16, 25];
var sum = numbers1.reduceRight(myFunction);

function myFunction(total, value) {
  return total + value;
}

## Array.every()

This # example checks if all values are over 18:

# Example
var numbers = [45, 4, 9, 16, 25];
var allOver18 = numbers.every(myFunction);

function myFunction(value) {
  return value > 18;
} 

## Array.some()

This # example checks if some values are over 18:

# Example
var numbers = [45, 4, 9, 16, 25];
var allOver18 = numbers.some(myFunction);

function myFunction(value) {
  return value > 18;
}

## Array.indexOf()

Search an array for an element value and returns its position.

# Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var a = fruits.indexOf("Apple");

## Array.lastIndexOf()

Search an array for an element value and returns its position.

# Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var a = fruits.indexOf("Apple");

## JSON.parse()

A common use of JSON is to receive data from a web server.

Imagine you received this text string from a web server:

'{"name":"John", "age":30, "city":"New York"}'
The JavaScript function JSON.parse() is used to convert the text into a JavaScript object:

v<!DOCTYPE html>
<html>
<body>

<h2>Create Object from JSON String</h2>

<p id="demo"></p>

<script>
var txt = '{"name":"John", "age":30, "city":"New York"}'
var obj = JSON.parse(txt);
document.getElementById("demo").innerHTML = obj.name + ", " + obj.age +", " +obj.city;
</script>

</body>
</html>

## JSON.stringify()

A common use of JSON is to send data to a web server.

When sending data to a web server, the data has to be a string.

Imagine we have this object in JavaScript:

var obj = {"name":"John", "age":30, "city":"New York"};
Use the JavaScript function JSON.stringify() to convert it into a string.

var myJSON = JSON.stringify(obj);
The result will be a string following the JSON notation.

myJSON is now a string, and ready to be sent to a server:

# Example
var obj = {"name":"John", "age":30, "city":"New York"};
var myJSON = JSON.stringify(obj);
document.getElementById("demo").innerHTML = myJSON;

## Date.now()

Date.now() returns the number of milliseconds since zero date (January 1. 1970 00:00:00 UTC).

# Example
var timInMSs = Date.now();

## Property Getters and Setters
## New Object Property Methods

## #ECMAScript 5 Syntactical Changes
Property access [ ] on strings
Trailing commas in array and object literals
Multiline string literals
Reserved words as property names